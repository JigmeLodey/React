{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAeCoYlOzgtUxwtKaftDjGtgNBF4McXF7g\",\n  authDomain: \"e-shop-6cf7e.firebaseapp.com\",\n  projectId: \"e-shop-6cf7e\",\n  storageBucket: \"e-shop-6cf7e.appspot.com\",\n  messagingSenderId: \"812232753119\",\n  appId: \"1:812232753119:web:2d61d0338c462758c08e6a\",\n  measurementId: \"G-XKD0HGCNTM\"\n};\nexport const createUserProfileDoc = async (userAuth, additoinalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additoinalData\n      });\n    } catch (e) {\n      console.log(\"error: \", e.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionsSnapShotToMap = collection => {\n  const transformCollection = collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // firebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/root/Documents/React/React/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDoc","userAuth","additoinalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","e","console","log","message","convertCollectionsSnapShotToMap","collection","transformCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAeCoYlOzgtUxwtKaftDjGtgNBF4McXF7g\",\n  authDomain: \"e-shop-6cf7e.firebaseapp.com\",\n  projectId: \"e-shop-6cf7e\",\n  storageBucket: \"e-shop-6cf7e.appspot.com\",\n  messagingSenderId: \"812232753119\",\n  appId: \"1:812232753119:web:2d61d0338c462758c08e6a\",\n  measurementId: \"G-XKD0HGCNTM\",\n};\n\nexport const createUserProfileDoc = async (userAuth, additoinalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additoinalData,\n      });\n    } catch (e) {\n      console.log(\"error: \", e.message);\n    }\n  }\n  return userRef;\n};\n\nexport const convertCollectionsSnapShotToMap = (collection) => {\n  const transformCollection = collection.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return transformCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n// firebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}