{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDoc, getCurrentUser } from \"../../firebase/firebase.util\";\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from \"./user.action\";\nimport UserActionTypes from \"./user.type\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDoc, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n    yield put(signUpSuccess({\n      user: {\n        email,\n        password\n      },\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  debugger;\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut;\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignUpStart), call(onSignOutStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/root/Documents/React/React/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDoc","getCurrentUser","signInFailure","signInSuccess","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDoc,\n  getCurrentUser,\n} from \"../../firebase/firebase.util\";\nimport {\n  signInFailure,\n  signInSuccess,\n  signOutFailure,\n  signOutSuccess,\n  signUpFailure,\n  signUpSuccess,\n} from \"./user.action\";\nimport UserActionTypes from \"./user.type\";\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDoc, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n    yield put(\n      signUpSuccess({\n        user: { email, password },\n        additionalData: { displayName },\n      })\n    );\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  debugger;\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut;\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(isUserAuthenticated),\n    call(onSignUpStart),\n    call(onSignOutStart),\n    call(onSignUpSuccess),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}